[{"D:\\react\\mb-app\\src\\index.js":"1","D:\\react\\mb-app\\src\\App.js":"2","D:\\react\\mb-app\\src\\reportWebVitals.js":"3","D:\\react\\mb-app\\src\\login\\Login.js":"4","D:\\react\\mb-app\\src\\header\\Header.js":"5","D:\\react\\mb-app\\src\\login\\LoginCtrl.js":"6","D:\\react\\mb-app\\src\\config\\AxiosConfig.js":"7","D:\\react\\mb-app\\src\\config\\RouteConfig.js":"8","D:\\react\\mb-app\\src\\work\\work.js":"9","D:\\react\\mb-app\\src\\work\\Work.js":"10","D:\\react\\mb-app\\src\\App.test.js":"11","D:\\react\\mb-app\\src\\login\\LoginAPI.js":"12","D:\\react\\mb-app\\src\\user\\User.js":"13","D:\\react\\mb-app\\src\\user\\UserCtrl.js":"14","D:\\react\\mb-app\\src\\user\\UserAPI.js":"15","D:\\react\\mb-app\\src\\app-store\\store.js":"16","D:\\react\\mb-app\\src\\app-store\\reducers\\AppReducer.js":"17","D:\\react\\mb-app\\src\\app-store\\actions\\LogoutAction.js":"18","D:\\react\\mb-app\\src\\app-store\\actions\\LoginAction.js":"19","D:\\react\\mb-app\\src\\app-store\\actions\\loginAction.js":"20","D:\\react\\mb-app\\src\\app-store\\reducers\\appReducer.js":"21","D:\\react\\mb-app\\src\\app-store\\actions\\logoutAction.js":"22","D:\\react\\mb-app\\src\\header\\Navbar.js":"23","D:\\react\\mb-app\\src\\header\\SideBarData.js":"24","D:\\react\\mb-app\\src\\app-store\\reducers\\sideBarReducer.js":"25","D:\\react\\mb-app\\src\\app-store\\actions\\sideBarAction.js":"26","D:\\react\\mb-app\\src\\context\\StoreContext.js":"27","D:\\react\\mb-app\\src\\context\\storeContext.js":"28","D:\\react\\mb-app\\src\\logout\\Logout.js":"29","D:\\react\\mb-app\\src\\customer\\Customer.js":"30","D:\\react\\mb-app\\src\\customer\\CustomerCtrl.js":"31","D:\\react\\mb-app\\src\\customer\\CustomerAPI.js":"32","D:\\react\\mb-app\\src\\app-store\\reducers\\customerReducer.js":"33","D:\\react\\mb-app\\src\\app-store\\actions\\customerAction.js":"34","D:\\react\\mb-app\\src\\products\\Product.js":"35","D:\\react\\mb-app\\src\\products\\ProductCtrl.js":"36","D:\\react\\mb-app\\src\\products\\ProductAPI.js":"37","D:\\react\\mb-app\\src\\error\\error.js":"38"},{"size":753,"mtime":1617357640570,"results":"39","hashOfConfig":"40"},{"size":1846,"mtime":1616253968947,"results":"41","hashOfConfig":"40"},{"size":362,"mtime":499162500000,"results":"42","hashOfConfig":"40"},{"size":3759,"mtime":1614488879307,"results":"43","hashOfConfig":"40"},{"size":612,"mtime":1611552413970,"results":"44","hashOfConfig":"40"},{"size":753,"mtime":1614840018376,"results":"45","hashOfConfig":"40"},{"size":2261,"mtime":1618812534972,"results":"46","hashOfConfig":"40"},{"size":458,"mtime":1614760556809,"results":"47","hashOfConfig":"40"},{"size":117,"mtime":1611653511978,"results":"48","hashOfConfig":"40"},{"size":620,"mtime":1614761649359,"results":"49","hashOfConfig":"40"},{"size":251,"mtime":1611654885872,"results":"50","hashOfConfig":"40"},{"size":363,"mtime":1615289884465,"results":"51","hashOfConfig":"40"},{"size":4080,"mtime":1614954350151,"results":"52","hashOfConfig":"40"},{"size":307,"mtime":1614926998842,"results":"53","hashOfConfig":"40"},{"size":426,"mtime":1614927552925,"results":"54","hashOfConfig":"40"},{"size":857,"mtime":1615287743527,"results":"55","hashOfConfig":"40"},{"size":402,"mtime":1614329791280,"results":"56","hashOfConfig":"40"},{"size":74,"mtime":1614326446678,"results":"57","hashOfConfig":"40"},{"size":176,"mtime":1614335192686,"results":"58","hashOfConfig":"40"},{"size":244,"mtime":1614844630873,"results":"59","hashOfConfig":"40"},{"size":838,"mtime":1614844631210,"results":"60","hashOfConfig":"40"},{"size":174,"mtime":1614844631017,"results":"61","hashOfConfig":"40"},{"size":2046,"mtime":1614833990451,"results":"62","hashOfConfig":"40"},{"size":876,"mtime":1616253472984,"results":"63","hashOfConfig":"40"},{"size":342,"mtime":1614509384493,"results":"64","hashOfConfig":"40"},{"size":182,"mtime":1614490635413,"results":"65","hashOfConfig":"40"},{"size":67,"mtime":1614690484499,"results":"66","hashOfConfig":"40"},{"size":67,"mtime":1614690484499,"results":"67","hashOfConfig":"40"},{"size":397,"mtime":1614922407343,"results":"68","hashOfConfig":"40"},{"size":19800,"mtime":1616059034460,"results":"69","hashOfConfig":"40"},{"size":485,"mtime":1616057297042,"results":"70","hashOfConfig":"40"},{"size":776,"mtime":1616420526016,"results":"71","hashOfConfig":"40"},{"size":641,"mtime":1615966642920,"results":"72","hashOfConfig":"40"},{"size":165,"mtime":1615963718796,"results":"73","hashOfConfig":"40"},{"size":30698,"mtime":1618811831323,"results":"74","hashOfConfig":"40"},{"size":6889,"mtime":1618030227730,"results":"75","hashOfConfig":"40"},{"size":1559,"mtime":1618034274760,"results":"76","hashOfConfig":"40"},{"size":306,"mtime":1618811201549,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"eiovob",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"D:\\react\\mb-app\\src\\index.js",[],["158","159"],"D:\\react\\mb-app\\src\\App.js",[],"D:\\react\\mb-app\\src\\reportWebVitals.js",[],"D:\\react\\mb-app\\src\\login\\Login.js",[],"D:\\react\\mb-app\\src\\header\\Header.js",["160"],"D:\\react\\mb-app\\src\\login\\LoginCtrl.js",[],"D:\\react\\mb-app\\src\\config\\AxiosConfig.js",[],"D:\\react\\mb-app\\src\\config\\RouteConfig.js",[],["161","162"],"D:\\react\\mb-app\\src\\work\\work.js",[],"D:\\react\\mb-app\\src\\work\\Work.js",[],"D:\\react\\mb-app\\src\\App.test.js",[],"D:\\react\\mb-app\\src\\login\\LoginAPI.js",[],"D:\\react\\mb-app\\src\\user\\User.js",[],"D:\\react\\mb-app\\src\\user\\UserCtrl.js",[],"D:\\react\\mb-app\\src\\user\\UserAPI.js",[],"D:\\react\\mb-app\\src\\app-store\\store.js",[],"D:\\react\\mb-app\\src\\app-store\\reducers\\AppReducer.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\LogoutAction.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\LoginAction.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\loginAction.js",[],"D:\\react\\mb-app\\src\\app-store\\reducers\\appReducer.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\logoutAction.js",[],"D:\\react\\mb-app\\src\\header\\Navbar.js",[],"D:\\react\\mb-app\\src\\header\\SideBarData.js",[],"D:\\react\\mb-app\\src\\app-store\\reducers\\sideBarReducer.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\sideBarAction.js",[],"D:\\react\\mb-app\\src\\context\\StoreContext.js",[],"D:\\react\\mb-app\\src\\context\\storeContext.js",[],"D:\\react\\mb-app\\src\\logout\\Logout.js",[],"D:\\react\\mb-app\\src\\customer\\Customer.js",["163","164","165","166","167","168","169"],"import React, { useEffect, useState } from 'react'\r\nimport { fetchAllCustomerDetails, saveCustomer, fetchAllCustomerType } from './CustomerCtrl'\r\nimport { useDispatch, useStore } from \"react-redux\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { customerAction } from \"../app-store/actions/customerAction\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nfunction Customer() {\r\n    const [customer, setCustomer] = useState('');\r\n    const [message, setMessage] = useState('Loading content...');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [partyTypes, setPartyTypes] = useState([]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        console.log('Customer changed')\r\n        Object.keys(customerFromStore).map((item, index) => {\r\n            if (customer === customerFromStore[item].name) {\r\n                setValue(\"id\", customerFromStore[item].id)\r\n                setValue(\"name\", customerFromStore[item].name)\r\n                setValue(\"mobileNo\", customerFromStore[item].mobileNo)\r\n                setValue(\"email\", customerFromStore[item].email)\r\n                setValue(\"addr1\", customerFromStore[item].addr1)\r\n                setValue(\"addr2\", customerFromStore[item].addr2)\r\n                setValue(\"city\", customerFromStore[item].city)\r\n                setValue(\"pinCode\", customerFromStore[item].pinCode)\r\n                setValue(\"gstin\", customerFromStore[item].gstin)\r\n                setValue(\"stateid\", customerFromStore[item].stateId)\r\n                setValue(\"startDate\", customerFromStore[item].startDate)\r\n                setValue(\"obAmount\", customerFromStore[item].obAmount)\r\n                setValue(\"createDate\", customerFromStore[item].createDate)\r\n                setValue(\"createByUser\", customerFromStore[item].id)\r\n                setValue(\"updatedByUser\", customerFromStore[item].updatedByUser)\r\n                setValue(\"inactive\", customerFromStore[item].inactive)\r\n                setValue(\"partyType\", customerFromStore[item].partyType.id)\r\n            }\r\n        });\r\n    }, [customer]);\r\n\r\n    useEffect(() => {\r\n        console.log('fecthing user customer!');\r\n        fetchAllCustomerDetails().then(response => {\r\n            for (const value of response.data) {\r\n                dispatch(customerAction(value));\r\n            }\r\n            setIsActive(false);\r\n        }).catch(error => {\r\n            setIsActive(false);\r\n            setErrorMessage(error.response.data.message)\r\n        });\r\n        console.log('fecthing customer type.!');\r\n        fetchAllCustomerType().then(response => {\r\n            console.log(response);\r\n            let values = [];\r\n            for(const val of response.data){\r\n                values.push(<option key={val.id} value={val.id}>{val.name}</option>)\r\n            }\r\n            setPartyTypes(values);\r\n        });\r\n    }, []);\r\n    const customerFromStore = useStore().getState().customerReducer.customerList;\r\n    const { register, handleSubmit, errors, setValue } = useForm();\r\n\r\n    const onSubmit = (data) => {\r\n        console.log(data);\r\n        setIsActive(true);\r\n        setErrorMessage('');\r\n        setMessage('Saving content...')\r\n        saveCustomer(data).then(response => {\r\n            dispatch(customerAction(response.data));\r\n            setIsActive(false);\r\n        }).catch(error => {\r\n            setIsActive(false);\r\n            setErrorMessage(error.response.data.message)\r\n        });\r\n    };\r\n    return (\r\n        <div class=\"container\">\r\n            <LoadingOverlay\r\n                active={isActive}\r\n                spinner\r\n                text={message}\r\n            >\r\n                <div className=\"row\" style={{ paddingTop: '25px' }}>\r\n                    <div className=\"col-sm-4\">Customers&nbsp;\r\n                        <input onChange={clicked} list=\"customerList\" name=\"customerLst\" id=\"customerLst\"></input>\r\n                        <datalist id=\"customerList\">\r\n                            {\r\n                                Object.keys(customerFromStore).map((item, index) => {\r\n                                    let name = customerFromStore[item].name;\r\n                                    let id = customerFromStore[item].id;\r\n                                    return (\r\n                                        <option value={name} key={index}>{name}</option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </datalist>\r\n                    </div>\r\n                </div>\r\n                <Form className=\"input-form\" onSubmit={handleSubmit(onSubmit)}>\r\n                    <div style={{ marginTop: '10px' }}>\r\n                        <input\r\n                            type=\"hidden\"\r\n                            name=\"id\"\r\n                            ref={register()}\r\n                        />\r\n                        <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                            <div className=\"col-6\" style={{ fontWeight: 'bold' }}>\r\n                                <label>Name</label>\r\n                            </div>\r\n                            <div className=\"col-6\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    autoComplete=\"off\"\r\n                                    className={`form-control ${errors.name ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'Name should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.name ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.name && (\r\n                                    <p className=\"errorMsg\">{errors.name.message}</p>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        {/* Party Type */}\r\n                        <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                            <div className=\"col-6\" style={{ fontWeight: 'bold' }}>\r\n                                <label>Party Type</label>\r\n                            </div>\r\n                            <div className=\"col-6\">\r\n                                <select ref={register()} name=\"partyType\">\r\n                                    {partyTypes}\r\n                                    {/* <option value=\"Customer\">Customer</option>\r\n                                    <option selected value=\"Customer-Supplier\">Customer-Supplier</option>\r\n                                    <option value=\"Supplier\">Supplier</option> */}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        {/* Mobile No */}\r\n                        <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                            <div className=\"col-6\" style={{ fontWeight: 'bold' }}>\r\n                                <label for=\"mobileNo\" >Mobile No</label>\r\n                            </div>\r\n                            <div className=\"col-6\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"mobileNo\"\r\n                                    autoComplete=\"off\"\r\n                                    className={`form-control ${errors.mobileNo ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Mobile number is required.',\r\n                                        pattern: {\r\n                                            value: /^([+]\\d{2})?\\d{10}$/,\r\n                                            message: 'Mobile should contain only 10 numbers .'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.mobileNo ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.mobileNo && (\r\n                                    <p className=\"errorMsg\">{errors.mobileNo.message}</p>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"col-6\" style={{ fontWeight: 'bold' }}>\r\n                            <label>Email Id</label>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                autoComplete=\"off\"\r\n                                className={`form-control ${errors.email ? \"is-invalid\" : \"\"}`}\r\n                                ref={register({\r\n                                    required: 'Email is required.',\r\n                                    pattern: {\r\n                                        value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/i,\r\n                                        message: 'Enter valid email.!'\r\n                                    }\r\n                                })}\r\n                                className={`${errors.email ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.email && (\r\n                                <p className=\"errorMsg\">{errors.email.message}</p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    {/* Addr 1 */}\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"col-6\" style={{ fontWeight: 'bold' }}>\r\n                            <label>Address(1)</label>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"addr1\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* Addr 2 */}\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"col-6\" style={{ fontWeight: 'bold' }}>\r\n                            <label>Address(2)</label>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"addr2\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* City */}\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"col-6\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>City</label>\r\n                        </div>\r\n                        <div className=\"col-*-6\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"city\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* Pin code */}\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"col-6\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>Pin code</label>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"pinCode\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* GSTIN */}\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"col-6\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>GSTIN</label>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"gstin\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* STATE ID */}\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"col-6\">\r\n                            <label style={{ fontWeight: 'bold', textAlign: 'right' }}>State Id</label>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"stateid\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* START DATE */}\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"col-6\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>Start Date</label>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <input\r\n                                type=\"date\"\r\n                                name=\"startDate\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* OB AMT */}\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"col-6\">\r\n                            <label style={{ fontWeight: 'bold', textAlign: 'right' }}>Ob/Amt.</label>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"obAmount\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* CREATE DATE */}\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"col-6\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>Crated Date</label>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <input\r\n                                type=\"date\"\r\n                                name=\"createDate\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* CREATE BY USER*/}\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"col-6\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>Created By</label>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"createByUser\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* UPDATED BY USER*/}\r\n                    <div className=\"row\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"col-6\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>Updated By</label>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"updatedByUser\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* ACTIVE */}\r\n                    <div style={{ fontSize: '15px', fontWeight: 'bold', textAlign: 'left' }}>\r\n                        <label for=\"inactive\">Active</label>&nbsp;\r\n                        <input style={{ size: '20px' }}\r\n                            type=\"checkbox\"\r\n                            name=\"inactive\"\r\n                            className=\"form-control\"\r\n                            ref={register()}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row\"><hr></hr></div>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Save\r\n                            </Button>\r\n                    <span style={{ color: 'red' }}>{errorMessage}</span>\r\n                </Form>\r\n            </LoadingOverlay>\r\n        </div>\r\n    )\r\n\r\n    function clicked(eve) {\r\n        setCustomer(eve.target.value)\r\n        setErrorMessage('');\r\n        setValue(\"id\", 0);\r\n    }\r\n}\r\n\r\nexport default Customer","D:\\react\\mb-app\\src\\customer\\CustomerCtrl.js",[],"D:\\react\\mb-app\\src\\customer\\CustomerAPI.js",[],"D:\\react\\mb-app\\src\\app-store\\reducers\\customerReducer.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\customerAction.js",[],"D:\\react\\mb-app\\src\\products\\Product.js",["170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport {\r\n    fetchAllProducts, fetchAllProductCategories,\r\n    updateProducts, deleteProducts,\r\n    searchAllProducts, enableReadOnly,\r\n    disableReadOnly, setDelete,\r\n    undoDelete, searchProductsCount\r\n} from './ProductCtrl'\r\nimport '../css/Work.css'\r\nimport ReactPaginate from 'react-paginate';\r\nimport { ErrorBoundary } from 'react-error-boundary'\r\nimport  ErrorFallback  from '../error/error'\r\n\r\nfunction Product() {\r\n    const [message, setMessage] = useState('Loading content...');\r\n    const [search, setSearch] = useState('');\r\n    const [categories, setCategories] = useState([]);\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [readOnly, setReadOnly] = useState(true);\r\n    const [page, setPage] = useState(0);\r\n    const [pageSize, setPageSize] = useState(5);\r\n    const [totalNoOfPages, setTotalNoOfPages] = useState(0);\r\n    const [totalProductsSearched, setTotalProductsSearched] = useState(0);\r\n\r\n    let [toggleEdit, setToggleEdit] = useState(true);\r\n    let [products, setProducts] = useState([]);\r\n    let [nextPage, setNextPage] = useState(0);\r\n\r\n    const refSearch = useRef('');\r\n\r\n    useEffect(() => {\r\n        let values = [];\r\n        fetchAllProductCategories().then(response => {\r\n            for (let val of response.data) {\r\n                values.push(<option key={val.id} value={val.id}>{val.name}</option>)\r\n            }\r\n            setCategories(values);\r\n        });\r\n        fetchAllProducts({}).then(response => {\r\n            console.log(\"Total length\", response.data.length)\r\n            setTotalNoOfPages(response.data.length / pageSize)\r\n            setIsActive(false);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (search.length > 0) {\r\n            console.log('search')\r\n            setIsActive(true);\r\n            searchProductsCount({\r\n                search: search\r\n            }).then(response => {\r\n                console.log(response.data)\r\n                setTotalProductsSearched(response.data);\r\n                setTotalNoOfPages(response.data / pageSize)\r\n                let data = {\r\n                    search: search,\r\n                    page: page,\r\n                    pageSize: pageSize,\r\n                    totalRecords: response.data\r\n                }\r\n                searchAllProducts(data).then(response => {\r\n                    console.log(response.data)\r\n                    setProducts(response.data.list);\r\n                    setNextPage(response.data.page)\r\n                    setIsActive(false);\r\n                })\r\n            });\r\n        }\r\n    }, [search]);\r\n\r\n    useEffect(() => {\r\n        console.log('page', page)\r\n        if (search.length > 0) {\r\n            let data = {\r\n                search: search,\r\n                page: page,\r\n                pageSize: pageSize,\r\n                totalRecords: totalProductsSearched\r\n            }\r\n            searchAllProducts(data).then(response => {\r\n                console.log(response.data)\r\n                setTotalProductsSearched(response.data.page)\r\n                setProducts(response.data.list);\r\n                setNextPage(response.data.page)\r\n            })\r\n        } else {\r\n            fetchAllProducts({\r\n                page: page,\r\n                pageSize: pageSize\r\n            }).then(response => {\r\n                console.log(response.data)\r\n                setProducts(response.data);\r\n            });\r\n        }\r\n    }, [page]);\r\n\r\n    const { register, handleSubmit, errors, setValue } = useForm();\r\n\r\n    function createProduct(child, isDelete) {\r\n        let product = {\r\n            'id': child.childNodes[0].childNodes[0].value,\r\n            'name': child.childNodes[1].childNodes[0].value,\r\n            'prodCategryId': child.childNodes[2].childNodes[0].value,\r\n            'hsnCode': child.childNodes[3].childNodes[0].value,\r\n            'service': child.childNodes[4].childNodes[0].checked,\r\n            'gstPercentage': child.childNodes[5].childNodes[0].value,\r\n            'cgstPercentage': child.childNodes[6].childNodes[0].value,\r\n            'sgstPercentage': child.childNodes[7].childNodes[0].value,\r\n            'inactive': child.childNodes[8].childNodes[0].checked,\r\n            'isDeleted': isDelete\r\n        };\r\n        return product;\r\n    }\r\n\r\n    const editUpdateEvent = (event) => {\r\n        let child = document.getElementById(('row' + event.target.attributes['data-rownum'].value))\r\n        console.log('editUpdateEvent', child)\r\n        toggleEdit = !toggleEdit;\r\n        setToggleEdit(toggleEdit);\r\n        enableReadOnly(child)\r\n        child.childNodes[9].childNodes[0].innerHTML = toggleEdit ? \"Edit\" : \"Update\";\r\n        child.childNodes[10].childNodes[0].style.display = 'none'\r\n        if (toggleEdit) {\r\n            setIsActive(true)\r\n            setMessage('Updating product.!')\r\n            updateProducts(createProduct(child, false)).then(response => {\r\n                console.log('product updated.!', response)\r\n                disableReadOnly(child)\r\n                setIsActive(false);\r\n                child.childNodes[10].childNodes[0].style.display = 'block'\r\n            })\r\n        }\r\n    }\r\n\r\n    const removeUndoEvent = (event) => {\r\n        console.log('number', event.target.attributes['data-rownum'].value)\r\n        console.log(products[event.target.attributes['data-rownum'].value].isDeleted)\r\n        let child = document.getElementById(('row' + event.target.attributes['data-rownum'].value))\r\n        let toggleRemove = !products[event.target.attributes['data-rownum'].value].isDeleted;\r\n        setIsActive(true)\r\n        setMessage('Updating product.!')\r\n        deleteProducts(createProduct(child, toggleRemove)).then(response => {\r\n            console.log('product delete.!', response)\r\n            products[event.target.attributes['data-rownum'].value].isDeleted = toggleRemove;\r\n            toggleRemove ? setDelete(child) : undoDelete(child);\r\n            setIsActive(false);\r\n        })\r\n    }\r\n\r\n    const searchEvent = (event) => {\r\n        console.log(event.target.type);\r\n        console.log(event.key);\r\n        if (event.key === 'Enter' || event.target.type === 'button') {\r\n            refSearch.current.focus();\r\n            setSearch(refSearch.current.value);\r\n        }\r\n    }\r\n\r\n    const createHeader = () => {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\" style={{ marginTop: \"5px\", backgroundColor: 'black', color: 'whitesmoke' }}>\r\n                    <span style={{ marginLeft: '2px' }} className=\"col-sm\">\r\n                        Product\r\n                 </span>\r\n                    <span style={{ marginLeft: '20px' }} className=\"col-sm\">\r\n                        Category\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        HSN Code\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        Service\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        GST(%)\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        CGST(%)\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        SGST(%)\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        Inactive\r\n                </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const createRows = () => {\r\n        return products.map((data, index) => {\r\n            return (\r\n                <>\r\n                    <div className=\"row\" id={'row' + index} key={index} style={{ marginTop: '5px', backgroundColor: index % 2 === 0 ? '' : '' }}>\r\n                        <div className=\"col-sm\">\r\n                            <input type='hidden'\r\n                                key={data.id}\r\n                                value={data.id}\r\n                                ref={register()}\r\n                                name=\"id\"\r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                type=\"text\"\r\n                                name=\"product\"\r\n                                autoComplete=\"off\"\r\n                                defaultValue={data.name}\r\n                                readOnly={readOnly}\r\n                                size={25}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                className={`form-control ${errors.product ? \"is-invalid\" : \"\"}`}\r\n                                ref={register(\r\n                                    {\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'Name should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                className={`${errors.product ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.product && (\r\n                                <p className=\"errorMsg\">{errors.product.message}</p>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <select\r\n                                readOnly={readOnly}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                defaultValue={data.prodCategryId} ref={register()} name=\"categoryType\">\r\n                                {categories}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                type=\"text\"\r\n                                defaultValue={data.hsnCode}\r\n                                name=\"hsn\"\r\n                                autoComplete=\"off\"\r\n                                readOnly={readOnly}\r\n                                size={8}\r\n                                maxLength={8}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                className={`form-control ${errors.hsn ? \"is-invalid\" : \"\"}`}\r\n                                ref={register({\r\n                                    required: 'Name is required.',\r\n                                    pattern: {\r\n                                        value: /[a-zA-Z]*/,\r\n                                        message: 'HSN should contain only characters.'\r\n                                    }\r\n                                })}\r\n                                className={`${errors.hsn ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.hsn && (\r\n                                <p className=\"errorMsg\">{errors.hsn.message}</p>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                defaultChecked={data.service}\r\n                                type=\"checkbox\"\r\n                                name=\"service\"\r\n                                ref={register()}\r\n                                readOnly={readOnly}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                size={6}\r\n                                maxLength={6}\r\n                                defaultValue={data.gstPercentage}\r\n                                type=\"text\"\r\n                                name=\"gstPercentage\"\r\n                                autoComplete=\"off\"\r\n                                readOnly={readOnly}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                className={`form-control ${errors.gstPercentage ? \"is-invalid\" : \"\"}`}\r\n                                ref={register({\r\n                                    required: 'Name is required.',\r\n                                    pattern: {\r\n                                        value: /[a-zA-Z]*/,\r\n                                        message: 'HSN should contain only characters.'\r\n                                    }\r\n                                })}\r\n                                className={`${errors.gstPercentage ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.gstPercentage && (\r\n                                <p className=\"errorMsg\">{errors.gstPercentage.message}</p>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                defaultValue={data.cgstPercentage}\r\n                                type=\"text\"\r\n                                name=\"cgstPercentage\"\r\n                                autoComplete=\"off\"\r\n                                size={6}\r\n                                maxLength={6}\r\n                                readOnly={readOnly}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                className={`form-control ${errors.cgstPercentage ? \"is-invalid\" : \"\"}`}\r\n                                ref={register({\r\n                                    required: 'Name is required.',\r\n                                    pattern: {\r\n                                        value: /[a-zA-Z]*/,\r\n                                        message: 'HSN should contain only characters.'\r\n                                    }\r\n                                })}\r\n                                className={`${errors.cgstPercentage ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.cgstPercentage && (\r\n                                <p className=\"errorMsg\">{errors.cgstPercentage.message}</p>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                defaultValue={data.sgstPercentage}\r\n                                type=\"text\"\r\n                                name=\"sgstPercentage\"\r\n                                autoComplete=\"off\"\r\n                                readOnly={readOnly}\r\n                                size={6}\r\n                                maxLength={6}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                className={`form-control ${errors.sgstPercentage ? \"is-invalid\" : \"\"}`}\r\n                                ref={register({\r\n                                    required: 'Name is required.',\r\n                                    pattern: {\r\n                                        value: /[a-zA-Z]*/,\r\n                                        message: 'HSN should contain only characters.'\r\n                                    }\r\n                                })}\r\n                                className={`${errors.sgstPercentage ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.sgstPercentage && (\r\n                                <p className=\"errorMsg\">{errors.sgstPercentage.message}</p>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                defaultChecked={data.inactive}\r\n                                type=\"checkbox\"\r\n                                name=\"inActive\"\r\n                                ref={register(\r\n                                )}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <button id=\"btn-edit\" style={{ display: data.isDeleted ? 'none' : 'block' }} data-rownum={index} className=\"btn btn-primary\" type=\"button\" onClick={editUpdateEvent} >\r\n                                Edit\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <button id=\"btn-remove\" data-rownum={index} className=\"btn btn-danger\" type=\"button\" onClick={removeUndoEvent} >\r\n                                {data.isDeleted ? 'Undo' : 'Delete'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )\r\n        })\r\n    }\r\n\r\n    const onSubmit = (data, e) => {\r\n        console.log('Data submitted.!');\r\n        let product = {\r\n            'id': e.target.childNodes[2].childNodes[0].childNodes[0].value,\r\n            'name': e.target.childNodes[2].childNodes[1].childNodes[0].value,\r\n            'prodCategryId': e.target.childNodes[2].childNodes[2].childNodes[0].value,\r\n            'hsnCode': e.target.childNodes[2].childNodes[3].childNodes[0].value,\r\n            'service': e.target.childNodes[2].childNodes[4].childNodes[0].checked,\r\n            'gstPercentage': e.target.childNodes[2].childNodes[5].childNodes[0].value,\r\n            'cgstPercentage': e.target.childNodes[2].childNodes[6].childNodes[0].value,\r\n            'sgstPercentage': e.target.childNodes[2].childNodes[7].childNodes[0].value,\r\n            'inactive': e.target.childNodes[2].childNodes[8].childNodes[0].checked,\r\n            'isDeleted': false\r\n        };\r\n        updateProducts(product).then(response => {\r\n            console.log('Inserted', response.data);\r\n            products.push(response.data)\r\n            console.log('Changed', products);\r\n            let form = document.getElementById(\"newProduct\");\r\n            let productTable = document.getElementById(\"parent\");\r\n            productTable.style.display = 'block'\r\n            form.style.display = 'none';\r\n            setProducts(products);\r\n        })\r\n    }\r\n\r\n    const newProductEvent = (event) => {\r\n        let form = document.getElementById(\"newProduct\");\r\n        let productTable = document.getElementById(\"parent\");\r\n        console.log(productTable)\r\n        productTable.style.display = 'none'\r\n        form.style.display = 'inline-flex';\r\n    }\r\n\r\n    const newProductCancelEvent = (event) => {\r\n        let form = document.getElementById(\"newProduct\");\r\n        let productTable = document.getElementById(\"parent\");\r\n        productTable.style.display = 'block'\r\n        form.style.display = 'none';\r\n    }\r\n\r\n    const handlePageClick = (data) => {\r\n        console.log(data.selected);\r\n        setPage(data.selected)\r\n    };\r\n\r\n    return (\r\n        <ErrorBoundary\r\n            FallbackComponent={ErrorFallback}>\r\n            <div class=\"container\">\r\n                <LoadingOverlay\r\n                    active={isActive}\r\n                    spinner\r\n                    text={message}\r\n                >\r\n                    <Form className=\"input-form\" onSubmit={handleSubmit(onSubmit)}>\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-3\">\r\n                                    <button class=\"btn btn-primary\" onClick={newProductEvent} type=\"button\">Add new product</button>\r\n                                </div>\r\n                                <div className=\"col-sm-6\">\r\n                                    <input ref={refSearch} onKeyDown={searchEvent} class=\"form-control\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"></input>\r\n                                </div>\r\n                                <div className=\"col-sm-3\">\r\n                                    <button class=\"btn btn-outline-success\" onClick={searchEvent} type=\"button\">Search</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {createHeader()}\r\n                        <div id=\"newProduct\" style={{ display: 'none' }} className=\"row\">\r\n                            <div className=\"col-sm\">\r\n                                <input type='hidden'\r\n                                    value=\"0\"\r\n                                    name=\"id_0\"\r\n                                ></input>\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"product_0\"\r\n                                    autoComplete=\"off\"\r\n                                    size={25}\r\n                                    className={`form-control ${errors.product_0 ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register(\r\n                                        {\r\n                                            required: 'Name is required.',\r\n                                            pattern: {\r\n                                                value: /[a-zA-Z]*/,\r\n                                                message: 'Name should contain only characters.'\r\n                                            }\r\n                                        })}\r\n                                    className={`${errors.product_0 ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.product_0 && (\r\n                                    <p className=\"errorMsg\">{errors.product_0.message}</p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <select\r\n                                    ref={register()} name=\"categoryType_0\">\r\n                                    {categories}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"hsn_0\"\r\n                                    autoComplete=\"off\"\r\n                                    size={8}\r\n                                    maxLength={8}\r\n                                    className={`form-control ${errors.hsn_0 ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'HSN should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.hsn_0 ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.hsn_0 && (\r\n                                    <p className=\"errorMsg\">{errors.hsn_0.message}</p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    name=\"service_0\"\r\n                                    ref={register()}\r\n                                    readOnly={readOnly}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    size={6}\r\n                                    maxLength={6}\r\n                                    type=\"text\"\r\n                                    name=\"gstPercentage_0\"\r\n                                    autoComplete=\"off\"\r\n                                    className={`form-control ${errors.gstPercentage_0 ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'HSN should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.gstPercentage_0 ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.gstPercentage_0 && (\r\n                                    <p className=\"errorMsg\">{errors.gstPercentage_0.message}</p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"cgstPercentage_0\"\r\n                                    autoComplete=\"off\"\r\n                                    size={6}\r\n                                    maxLength={6}\r\n                                    className={`form-control ${errors.cgstPercentage_0 ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'HSN should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.cgstPercentage_0 ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.cgstPercentage_0 && (\r\n                                    <p className=\"errorMsg\">{errors.cgstPercentage_0.message}</p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"sgstPercentage_0\"\r\n                                    autoComplete=\"off\"\r\n                                    size={6}\r\n                                    maxLength={6}\r\n                                    className={`form-control ${errors.sgstPercentage_0 ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'HSN should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.sgstPercentage_0 ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.sgstPercentage_0 && (\r\n                                    <p className=\"errorMsg\">{errors.sgstPercentage_0.message}</p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    name=\"inActive_0\"\r\n                                    ref={register(\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <button class=\"btn btn-primary\" type=\"submit\">Save</button>\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <button class=\"btn btn-danger\" onClick={newProductCancelEvent} type=\"button\">Cancel</button>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                    <div id=\"parent\">\r\n                        {createRows()}\r\n                        <div className=\"row justify-content-md-center\">\r\n                            <div className=\"col-sm\">\r\n                                <ReactPaginate\r\n                                    previousLabel={'previous'}\r\n                                    nextLabel={'next'}\r\n                                    breakLabel={'...'}\r\n                                    breakClassName={'break-me'}\r\n                                    pageCount={totalNoOfPages}\r\n                                    marginPagesDisplayed={0}\r\n                                    pageRangeDisplayed={2}\r\n                                    onPageChange={handlePageClick}\r\n                                    containerClassName={'pagination'}\r\n                                    activeClassName={'pagination'}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </LoadingOverlay>\r\n            </div>\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n\r\nexport default Product","D:\\react\\mb-app\\src\\products\\ProductCtrl.js",[],"D:\\react\\mb-app\\src\\products\\ProductAPI.js",[],"D:\\react\\mb-app\\src\\error\\error.js",[],{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":6,"column":19,"nodeType":"194","messageId":"195","endLine":6,"endColumn":27},{"ruleId":"188","replacedBy":"196"},{"ruleId":"190","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":20,"column":58,"nodeType":"200","messageId":"201","endLine":20,"endColumn":60},{"ruleId":"202","severity":1,"message":"203","line":41,"column":8,"nodeType":"204","endLine":41,"endColumn":18,"suggestions":"205"},{"ruleId":"202","severity":1,"message":"206","line":63,"column":8,"nodeType":"204","endLine":63,"endColumn":10,"suggestions":"207"},{"ruleId":"192","severity":1,"message":"208","line":94,"column":41,"nodeType":"194","messageId":"195","endLine":94,"endColumn":43},{"ruleId":"209","severity":1,"message":"210","line":127,"column":37,"nodeType":"211","endLine":127,"endColumn":86},{"ruleId":"209","severity":1,"message":"210","line":166,"column":37,"nodeType":"211","endLine":166,"endColumn":90},{"ruleId":"209","severity":1,"message":"210","line":191,"column":33,"nodeType":"211","endLine":191,"endColumn":83},{"ruleId":"192","severity":1,"message":"212","line":2,"column":16,"nodeType":"194","messageId":"195","endLine":2,"endColumn":22},{"ruleId":"192","severity":1,"message":"213","line":22,"column":22,"nodeType":"194","messageId":"195","endLine":22,"endColumn":33},{"ruleId":"192","severity":1,"message":"214","line":24,"column":22,"nodeType":"194","messageId":"195","endLine":24,"endColumn":33},{"ruleId":"192","severity":1,"message":"215","line":30,"column":10,"nodeType":"194","messageId":"195","endLine":30,"endColumn":18},{"ruleId":"202","severity":1,"message":"216","line":47,"column":8,"nodeType":"204","endLine":47,"endColumn":10,"suggestions":"217"},{"ruleId":"202","severity":1,"message":"218","line":73,"column":8,"nodeType":"204","endLine":73,"endColumn":16,"suggestions":"219"},{"ruleId":"202","severity":1,"message":"220","line":99,"column":8,"nodeType":"204","endLine":99,"endColumn":14,"suggestions":"221"},{"ruleId":"192","severity":1,"message":"222","line":101,"column":45,"nodeType":"194","messageId":"195","endLine":101,"endColumn":53},{"ruleId":"209","severity":1,"message":"210","line":228,"column":33,"nodeType":"211","endLine":228,"endColumn":85},{"ruleId":"209","severity":1,"message":"210","line":261,"column":33,"nodeType":"211","endLine":261,"endColumn":81},{"ruleId":"209","severity":1,"message":"210","line":297,"column":33,"nodeType":"211","endLine":297,"endColumn":91},{"ruleId":"209","severity":1,"message":"210","line":322,"column":33,"nodeType":"211","endLine":322,"endColumn":92},{"ruleId":"209","severity":1,"message":"210","line":347,"column":33,"nodeType":"211","endLine":347,"endColumn":92},{"ruleId":"209","severity":1,"message":"210","line":472,"column":37,"nodeType":"211","endLine":472,"endColumn":91},{"ruleId":"209","severity":1,"message":"210","line":499,"column":37,"nodeType":"211","endLine":499,"endColumn":87},{"ruleId":"209","severity":1,"message":"210","line":528,"column":37,"nodeType":"211","endLine":528,"endColumn":97},{"ruleId":"209","severity":1,"message":"210","line":549,"column":37,"nodeType":"211","endLine":549,"endColumn":98},{"ruleId":"209","severity":1,"message":"210","line":570,"column":37,"nodeType":"211","endLine":570,"endColumn":98},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],"no-unused-vars","'setTitle' is assigned a value but never used.","Identifier","unusedVar",["223"],["224"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'customerFromStore' and 'setValue'. Either include them or remove the dependency array.","ArrayExpression",["225"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["226"],"'id' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Button' is defined but never used.","'setReadOnly' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'nextPage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'pageSize'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTotalNoOfPages' needs the current value of 'pageSize'.",["227"],"React Hook useEffect has missing dependencies: 'page' and 'pageSize'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTotalNoOfPages' needs the current value of 'pageSize'.",["228"],"React Hook useEffect has missing dependencies: 'pageSize', 'search', and 'totalProductsSearched'. Either include them or remove the dependency array.",["229"],"'setValue' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},"Update the dependencies array to be: [customer, customerFromStore, setValue]",{"range":"240","text":"241"},"Update the dependencies array to be: [dispatch]",{"range":"242","text":"243"},"Update the dependencies array to be: [pageSize]",{"range":"244","text":"245"},"Update the dependencies array to be: [page, pageSize, search]",{"range":"246","text":"247"},"Update the dependencies array to be: [page, pageSize, search, totalProductsSearched]",{"range":"248","text":"249"},[2179,2189],"[customer, customerFromStore, setValue]",[2972,2974],"[dispatch]",[1860,1862],"[pageSize]",[2777,2785],"[page, pageSize, search]",[3627,3633],"[page, pageSize, search, totalProductsSearched]"]