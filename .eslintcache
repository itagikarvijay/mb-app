[{"D:\\react\\mb-app\\src\\index.js":"1","D:\\react\\mb-app\\src\\App.js":"2","D:\\react\\mb-app\\src\\reportWebVitals.js":"3","D:\\react\\mb-app\\src\\login\\Login.js":"4","D:\\react\\mb-app\\src\\header\\Header.js":"5","D:\\react\\mb-app\\src\\login\\LoginCtrl.js":"6","D:\\react\\mb-app\\src\\config\\AxiosConfig.js":"7","D:\\react\\mb-app\\src\\config\\RouteConfig.js":"8","D:\\react\\mb-app\\src\\work\\work.js":"9","D:\\react\\mb-app\\src\\work\\Work.js":"10","D:\\react\\mb-app\\src\\App.test.js":"11","D:\\react\\mb-app\\src\\login\\LoginAPI.js":"12","D:\\react\\mb-app\\src\\user\\User.js":"13","D:\\react\\mb-app\\src\\user\\UserCtrl.js":"14","D:\\react\\mb-app\\src\\user\\UserAPI.js":"15","D:\\react\\mb-app\\src\\app-store\\store.js":"16","D:\\react\\mb-app\\src\\app-store\\reducers\\AppReducer.js":"17","D:\\react\\mb-app\\src\\app-store\\actions\\LogoutAction.js":"18","D:\\react\\mb-app\\src\\app-store\\actions\\LoginAction.js":"19","D:\\react\\mb-app\\src\\app-store\\actions\\loginAction.js":"20","D:\\react\\mb-app\\src\\app-store\\reducers\\appReducer.js":"21","D:\\react\\mb-app\\src\\app-store\\actions\\logoutAction.js":"22","D:\\react\\mb-app\\src\\header\\Navbar.js":"23","D:\\react\\mb-app\\src\\header\\SideBarData.js":"24","D:\\react\\mb-app\\src\\app-store\\reducers\\sideBarReducer.js":"25","D:\\react\\mb-app\\src\\app-store\\actions\\sideBarAction.js":"26","D:\\react\\mb-app\\src\\context\\StoreContext.js":"27","D:\\react\\mb-app\\src\\context\\storeContext.js":"28","D:\\react\\mb-app\\src\\logout\\Logout.js":"29","D:\\react\\mb-app\\src\\customer\\Customer.js":"30","D:\\react\\mb-app\\src\\customer\\CustomerCtrl.js":"31","D:\\react\\mb-app\\src\\customer\\CustomerAPI.js":"32","D:\\react\\mb-app\\src\\app-store\\reducers\\customerReducer.js":"33","D:\\react\\mb-app\\src\\app-store\\actions\\customerAction.js":"34","D:\\react\\mb-app\\src\\products\\Product.js":"35","D:\\react\\mb-app\\src\\products\\ProductCtrl.js":"36","D:\\react\\mb-app\\src\\products\\ProductAPI.js":"37","D:\\react\\mb-app\\src\\error\\error.js":"38","D:\\react\\mb-app\\src\\invoice\\Invoice.js":"39"},{"size":750,"mtime":1619158607519,"results":"40","hashOfConfig":"41"},{"size":1947,"mtime":1618836296588,"results":"42","hashOfConfig":"41"},{"size":362,"mtime":499162500000,"results":"43","hashOfConfig":"41"},{"size":3953,"mtime":1618839723375,"results":"44","hashOfConfig":"41"},{"size":612,"mtime":1611552413970,"results":"45","hashOfConfig":"41"},{"size":753,"mtime":1614840018376,"results":"46","hashOfConfig":"41"},{"size":2261,"mtime":1619591020218,"results":"47","hashOfConfig":"41"},{"size":458,"mtime":1614760556809,"results":"48","hashOfConfig":"41"},{"size":117,"mtime":1611653511978,"results":"49","hashOfConfig":"41"},{"size":620,"mtime":1614761649359,"results":"50","hashOfConfig":"41"},{"size":251,"mtime":1611654885872,"results":"51","hashOfConfig":"41"},{"size":363,"mtime":1615289884465,"results":"52","hashOfConfig":"41"},{"size":4080,"mtime":1614954350151,"results":"53","hashOfConfig":"41"},{"size":307,"mtime":1614926998842,"results":"54","hashOfConfig":"41"},{"size":426,"mtime":1614927552925,"results":"55","hashOfConfig":"41"},{"size":857,"mtime":1615287743527,"results":"56","hashOfConfig":"41"},{"size":402,"mtime":1614329791280,"results":"57","hashOfConfig":"41"},{"size":74,"mtime":1614326446678,"results":"58","hashOfConfig":"41"},{"size":176,"mtime":1614335192686,"results":"59","hashOfConfig":"41"},{"size":244,"mtime":1614844630873,"results":"60","hashOfConfig":"41"},{"size":838,"mtime":1614844631210,"results":"61","hashOfConfig":"41"},{"size":174,"mtime":1614844631017,"results":"62","hashOfConfig":"41"},{"size":2046,"mtime":1614833990451,"results":"63","hashOfConfig":"41"},{"size":1017,"mtime":1618836045084,"results":"64","hashOfConfig":"41"},{"size":342,"mtime":1614509384493,"results":"65","hashOfConfig":"41"},{"size":182,"mtime":1614490635413,"results":"66","hashOfConfig":"41"},{"size":67,"mtime":1614690484499,"results":"67","hashOfConfig":"41"},{"size":67,"mtime":1614690484499,"results":"68","hashOfConfig":"41"},{"size":397,"mtime":1614922407343,"results":"69","hashOfConfig":"41"},{"size":20067,"mtime":1619590015847,"results":"70","hashOfConfig":"41"},{"size":485,"mtime":1616057297042,"results":"71","hashOfConfig":"41"},{"size":776,"mtime":1616420526016,"results":"72","hashOfConfig":"41"},{"size":641,"mtime":1615966642920,"results":"73","hashOfConfig":"41"},{"size":165,"mtime":1615963718796,"results":"74","hashOfConfig":"41"},{"size":30690,"mtime":1619159197127,"results":"75","hashOfConfig":"41"},{"size":6885,"mtime":1618899027361,"results":"76","hashOfConfig":"41"},{"size":1555,"mtime":1618899027361,"results":"77","hashOfConfig":"41"},{"size":306,"mtime":1618811201549,"results":"78","hashOfConfig":"41"},{"size":16834,"mtime":1619590959984,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"eiovob",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"82"},"D:\\react\\mb-app\\src\\index.js",[],["163","164"],"D:\\react\\mb-app\\src\\App.js",[],"D:\\react\\mb-app\\src\\reportWebVitals.js",[],"D:\\react\\mb-app\\src\\login\\Login.js",[],"D:\\react\\mb-app\\src\\header\\Header.js",["165"],"D:\\react\\mb-app\\src\\login\\LoginCtrl.js",[],"D:\\react\\mb-app\\src\\config\\AxiosConfig.js",[],"D:\\react\\mb-app\\src\\config\\RouteConfig.js",[],["166","167"],"D:\\react\\mb-app\\src\\work\\work.js",[],"D:\\react\\mb-app\\src\\work\\Work.js",[],"D:\\react\\mb-app\\src\\App.test.js",[],"D:\\react\\mb-app\\src\\login\\LoginAPI.js",[],"D:\\react\\mb-app\\src\\user\\User.js",[],"D:\\react\\mb-app\\src\\user\\UserCtrl.js",[],"D:\\react\\mb-app\\src\\user\\UserAPI.js",[],"D:\\react\\mb-app\\src\\app-store\\store.js",[],"D:\\react\\mb-app\\src\\app-store\\reducers\\AppReducer.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\LogoutAction.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\LoginAction.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\loginAction.js",[],"D:\\react\\mb-app\\src\\app-store\\reducers\\appReducer.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\logoutAction.js",[],"D:\\react\\mb-app\\src\\header\\Navbar.js",[],"D:\\react\\mb-app\\src\\header\\SideBarData.js",[],"D:\\react\\mb-app\\src\\app-store\\reducers\\sideBarReducer.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\sideBarAction.js",[],"D:\\react\\mb-app\\src\\context\\StoreContext.js",[],"D:\\react\\mb-app\\src\\context\\storeContext.js",[],"D:\\react\\mb-app\\src\\logout\\Logout.js",[],"D:\\react\\mb-app\\src\\customer\\Customer.js",["168","169","170","171","172","173","174"],"import React, { useEffect, useState } from 'react'\r\nimport { fetchAllCustomerDetails, saveCustomer, fetchAllCustomerType } from './CustomerCtrl'\r\nimport { useDispatch, useStore } from \"react-redux\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { customerAction } from \"../app-store/actions/customerAction\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nfunction Customer() {\r\n    const [customer, setCustomer] = useState('');\r\n    const [message, setMessage] = useState('Loading content...');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [partyTypes, setPartyTypes] = useState([]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        Object.keys(customerFromStore).map((item, index) => {\r\n            if (customer === customerFromStore[item].name) {\r\n                setValue(\"id\", customerFromStore[item].id)\r\n                setValue(\"name\", customerFromStore[item].name)\r\n                setValue(\"mobileNo\", customerFromStore[item].mobileNo)\r\n                setValue(\"email\", customerFromStore[item].email)\r\n                setValue(\"addr1\", customerFromStore[item].addr1)\r\n                setValue(\"addr2\", customerFromStore[item].addr2)\r\n                setValue(\"city\", customerFromStore[item].city)\r\n                setValue(\"pinCode\", customerFromStore[item].pinCode)\r\n                setValue(\"gstin\", customerFromStore[item].gstin)\r\n                setValue(\"stateid\", customerFromStore[item].stateId)\r\n                setValue(\"startDate\", customerFromStore[item].startDate)\r\n                setValue(\"obAmount\", customerFromStore[item].obAmount)\r\n                setValue(\"createDate\", customerFromStore[item].createDate)\r\n                setValue(\"createByUser\", customerFromStore[item].id)\r\n                setValue(\"updatedByUser\", customerFromStore[item].updatedByUser)\r\n                setValue(\"inactive\", customerFromStore[item].inactive)\r\n                setValue(\"partyType\", customerFromStore[item].partyType.id)\r\n            }\r\n        });\r\n    }, [customer]);\r\n\r\n    useEffect(() => {\r\n        fetchAllCustomerDetails().then(response => {\r\n            for (const value of response.data) {\r\n                dispatch(customerAction(value));\r\n            }\r\n            setIsActive(false);\r\n        }).catch(error => {\r\n            setIsActive(false);\r\n            setErrorMessage(error.response.data.message)\r\n        });\r\n        fetchAllCustomerType().then(response => {\r\n            console.log(response);\r\n            let values = [];\r\n            for (const val of response.data) {\r\n                values.push(<option key={val.id} value={val.id}>{val.name}</option>)\r\n            }\r\n            setPartyTypes(values);\r\n        });\r\n    }, []);\r\n    const customerFromStore = useStore().getState().customerReducer.customerList;\r\n    const { register, handleSubmit, errors, setValue } = useForm();\r\n\r\n    const onSubmit = (data) => {\r\n        setIsActive(true);\r\n        setErrorMessage('');\r\n        setMessage('Saving content...')\r\n        saveCustomer(data).then(response => {\r\n            dispatch(customerAction(response.data));\r\n            setIsActive(false);\r\n        }).catch(error => {\r\n            setIsActive(false);\r\n            setErrorMessage(error.response.data.message)\r\n        });\r\n    };\r\n    return (\r\n        <div class=\"container\">\r\n            <LoadingOverlay\r\n                active={isActive}\r\n                spinner\r\n                text={message}\r\n            >\r\n                <div className=\"row\" style={{ paddingTop: '25px' }}>\r\n                    <div className=\"col-sm-4\">Customers&nbsp;\r\n                        <input onChange={clicked} list=\"customerList\" name=\"customerLst\" id=\"customerLst\"></input>\r\n                        <datalist id=\"customerList\">\r\n                            {\r\n                                Object.keys(customerFromStore).map((item, index) => {\r\n                                    let name = customerFromStore[item].name;\r\n                                    let id = customerFromStore[item].id;\r\n                                    return (\r\n                                        <option value={name} key={index}>{name}</option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </datalist>\r\n                    </div>\r\n                </div>\r\n                <Form className=\"input-form\" onSubmit={handleSubmit(onSubmit)}>\r\n                    <div style={{ marginTop: '10px' }}>\r\n                        <input\r\n                            type=\"hidden\"\r\n                            name=\"id\"\r\n                            ref={register()}\r\n                        />\r\n                        <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                            <div className=\"p-2\" style={{ fontWeight: 'bold' }}>\r\n                                <label>Name</label>\r\n                            </div>\r\n                            <div className=\"p-2\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    autoComplete=\"off\"\r\n                                    className={`form-control ${errors.name ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'Name should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.name ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.name && (\r\n                                    <p className=\"errorMsg\">{errors.name.message}</p>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        {/* Party Type */}\r\n                        <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                            <div className=\"p-2\" style={{ fontWeight: 'bold' }}>\r\n                                <label>Party Type</label>\r\n                            </div>\r\n                            <div className=\"p-2\">\r\n                                <select ref={register()} name=\"partyType\">\r\n                                    {partyTypes}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        {/* Mobile No */}\r\n                        <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                            <div className=\"p-2\" style={{ fontWeight: 'bold' }}>\r\n                                <label for=\"mobileNo\" >Mobile No</label>\r\n                            </div>\r\n                            <div className=\"p-2\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"mobileNo\"\r\n                                    autoComplete=\"off\"\r\n                                    className={`form-control ${errors.mobileNo ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Mobile number is required.',\r\n                                        pattern: {\r\n                                            value: /^([+]\\d{2})?\\d{10}$/,\r\n                                            message: 'Mobile should contain only 10 numbers .'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.mobileNo ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.mobileNo && (\r\n                                    <p className=\"errorMsg\">{errors.mobileNo.message}</p>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"p-2\" style={{ fontWeight: 'bold' }}>\r\n                            <label>Email Id</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                autoComplete=\"off\"\r\n                                className={`form-control ${errors.email ? \"is-invalid\" : \"\"}`}\r\n                                ref={register({\r\n                                    required: 'Email is required.',\r\n                                    pattern: {\r\n                                        value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/i,\r\n                                        message: 'Enter valid email.!'\r\n                                    }\r\n                                })}\r\n                                className={`${errors.email ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.email && (\r\n                                <p className=\"errorMsg\">{errors.email.message}</p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    {/* Addr 1 */}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"p-2\" style={{ fontWeight: 'bold' }}>\r\n                            <label>Address(1)</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"addr1\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* Addr 2 */}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"p-2\" style={{ fontWeight: 'bold' }}>\r\n                            <label>Address(2)</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"addr2\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* City */}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"p-2\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>City</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"city\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* Pin code */}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"p-2\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>Pin code</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"pinCode\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* GSTIN */}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"p-2\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>GSTIN</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"gstin\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* STATE ID */}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"p-2\">\r\n                            <label style={{ fontWeight: 'bold', textAlign: 'right' }}>State Id</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"stateid\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* START DATE */}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"p-\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>Start Date</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"date\"\r\n                                name=\"startDate\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* OB AMT */}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"p-2\">\r\n                            <label style={{ fontWeight: 'bold', textAlign: 'right' }}>Ob/Amt.</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"obAmount\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* CREATE DATE */}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"p-2\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>Crated Date</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"date\"\r\n                                name=\"createDate\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* CREATE BY USER*/}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavender', marginTop: '10px' }}>\r\n                        <div className=\"p-2\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>Created By</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"createByUser\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* UPDATED BY USER*/}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ paddingLeft: \"5px\", backgroundColor: 'lavenderblush', marginTop: '10px' }}>\r\n                        <div className=\"p-2\" style={{ fontWeight: 'bold', textAlign: 'right' }}>\r\n                            <label>Updated By</label>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"updatedByUser\"\r\n                                className=\"form-control\"\r\n                                ref={register()}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* ACTIVE */}\r\n                    <div className=\"d-flex flex-row text-black justify-content-around\" style={{ fontSize: '15px', fontWeight: 'bold', textAlign: 'left' }}>\r\n                        <div className=\"p-2\">\r\n                            <label for=\"inactive\">Active</label>&nbsp;\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input style={{ size: '20px' }}\r\n                                type=\"checkbox\"\r\n                                name=\"inactive\"\r\n                                ref={register()}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <Button variant=\"primary\" type=\"submit\">Save</Button>\r\n                    <span style={{ color: 'red' }}>{errorMessage}</span>\r\n                </Form>\r\n            </LoadingOverlay>\r\n        </div>\r\n    )\r\n\r\n    function clicked(eve) {\r\n        setCustomer(eve.target.value)\r\n        setErrorMessage('');\r\n        setValue(\"id\", 0);\r\n    }\r\n}\r\n\r\nexport default Customer","D:\\react\\mb-app\\src\\customer\\CustomerCtrl.js",[],"D:\\react\\mb-app\\src\\customer\\CustomerAPI.js",[],"D:\\react\\mb-app\\src\\app-store\\reducers\\customerReducer.js",[],"D:\\react\\mb-app\\src\\app-store\\actions\\customerAction.js",[],"D:\\react\\mb-app\\src\\products\\Product.js",["175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { Form } from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport {\r\n    fetchAllProducts, fetchAllProductCategories,\r\n    updateProducts, deleteProducts,\r\n    searchAllProducts, enableReadOnly,\r\n    disableReadOnly, setDelete,\r\n    undoDelete, searchProductsCount\r\n} from './ProductCtrl'\r\nimport '../css/Work.css'\r\nimport ReactPaginate from 'react-paginate';\r\nimport { ErrorBoundary } from 'react-error-boundary'\r\nimport  ErrorFallback  from '../error/error'\r\n\r\nfunction Product() {\r\n    const [message, setMessage] = useState('Loading content...');\r\n    const [search, setSearch] = useState('');\r\n    const [categories, setCategories] = useState([]);\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [readOnly, setReadOnly] = useState(true);\r\n    const [page, setPage] = useState(0);\r\n    const [pageSize, setPageSize] = useState(5);\r\n    const [totalNoOfPages, setTotalNoOfPages] = useState(0);\r\n    const [totalProductsSearched, setTotalProductsSearched] = useState(0);\r\n\r\n    let [toggleEdit, setToggleEdit] = useState(true);\r\n    let [products, setProducts] = useState([]);\r\n    let [nextPage, setNextPage] = useState(0);\r\n\r\n    const refSearch = useRef('');\r\n\r\n    useEffect(() => {\r\n        let values = [];\r\n        fetchAllProductCategories().then(response => {\r\n            for (let val of response.data) {\r\n                values.push(<option key={val.id} value={val.id}>{val.name}</option>)\r\n            }\r\n            setCategories(values);\r\n        });\r\n        fetchAllProducts({}).then(response => {\r\n            console.log(\"Total length\", response.data.length)\r\n            setTotalNoOfPages(response.data.length / pageSize)\r\n            setIsActive(false);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (search.length > 0) {\r\n            console.log('search')\r\n            setIsActive(true);\r\n            searchProductsCount({\r\n                search: search\r\n            }).then(response => {\r\n                console.log(response.data)\r\n                setTotalProductsSearched(response.data);\r\n                setTotalNoOfPages(response.data / pageSize)\r\n                let data = {\r\n                    search: search,\r\n                    page: page,\r\n                    pageSize: pageSize,\r\n                    totalRecords: response.data\r\n                }\r\n                searchAllProducts(data).then(response => {\r\n                    console.log(response.data)\r\n                    setProducts(response.data.list);\r\n                    setNextPage(response.data.page)\r\n                    setIsActive(false);\r\n                })\r\n            });\r\n        }\r\n    }, [search]);\r\n\r\n    useEffect(() => {\r\n        console.log('page', page)\r\n        if (search.length > 0) {\r\n            let data = {\r\n                search: search,\r\n                page: page,\r\n                pageSize: pageSize,\r\n                totalRecords: totalProductsSearched\r\n            }\r\n            searchAllProducts(data).then(response => {\r\n                console.log(response.data)\r\n                setTotalProductsSearched(response.data.page)\r\n                setProducts(response.data.list);\r\n                setNextPage(response.data.page)\r\n            })\r\n        } else {\r\n            fetchAllProducts({\r\n                page: page,\r\n                pageSize: pageSize\r\n            }).then(response => {\r\n                console.log(response.data)\r\n                setProducts(response.data);\r\n            });\r\n        }\r\n    }, [page]);\r\n\r\n    const { register, handleSubmit, errors, setValue } = useForm();\r\n\r\n    function createProduct(child, isDelete) {\r\n        let product = {\r\n            'id': child.childNodes[0].childNodes[0].value,\r\n            'name': child.childNodes[1].childNodes[0].value,\r\n            'prodCategryId': child.childNodes[2].childNodes[0].value,\r\n            'hsnCode': child.childNodes[3].childNodes[0].value,\r\n            'service': child.childNodes[4].childNodes[0].checked,\r\n            'gstPercentage': child.childNodes[5].childNodes[0].value,\r\n            'cgstPercentage': child.childNodes[6].childNodes[0].value,\r\n            'sgstPercentage': child.childNodes[7].childNodes[0].value,\r\n            'inactive': child.childNodes[8].childNodes[0].checked,\r\n            'isDeleted': isDelete\r\n        };\r\n        return product;\r\n    }\r\n\r\n    const editUpdateEvent = (event) => {\r\n        let child = document.getElementById(('row' + event.target.attributes['data-rownum'].value))\r\n        console.log('editUpdateEvent', child)\r\n        toggleEdit = !toggleEdit;\r\n        setToggleEdit(toggleEdit);\r\n        enableReadOnly(child)\r\n        child.childNodes[9].childNodes[0].innerHTML = toggleEdit ? \"Edit\" : \"Update\";\r\n        child.childNodes[10].childNodes[0].style.display = 'none'\r\n        if (toggleEdit) {\r\n            setIsActive(true)\r\n            setMessage('Updating product.!')\r\n            updateProducts(createProduct(child, false)).then(response => {\r\n                console.log('product updated.!', response)\r\n                disableReadOnly(child)\r\n                setIsActive(false);\r\n                child.childNodes[10].childNodes[0].style.display = 'block'\r\n            })\r\n        }\r\n    }\r\n\r\n    const removeUndoEvent = (event) => {\r\n        console.log('number', event.target.attributes['data-rownum'].value)\r\n        console.log(products[event.target.attributes['data-rownum'].value].isDeleted)\r\n        let child = document.getElementById(('row' + event.target.attributes['data-rownum'].value))\r\n        let toggleRemove = !products[event.target.attributes['data-rownum'].value].isDeleted;\r\n        setIsActive(true)\r\n        setMessage('Updating product.!')\r\n        deleteProducts(createProduct(child, toggleRemove)).then(response => {\r\n            console.log('product delete.!', response)\r\n            products[event.target.attributes['data-rownum'].value].isDeleted = toggleRemove;\r\n            toggleRemove ? setDelete(child) : undoDelete(child);\r\n            setIsActive(false);\r\n        })\r\n    }\r\n\r\n    const searchEvent = (event) => {\r\n        console.log(event.target.type);\r\n        console.log(event.key);\r\n        if (event.key === 'Enter' || event.target.type === 'button') {\r\n            refSearch.current.focus();\r\n            setSearch(refSearch.current.value);\r\n        }\r\n    }\r\n\r\n    const createHeader = () => {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\" style={{ marginTop: \"5px\", backgroundColor: 'black', color: 'whitesmoke' }}>\r\n                    <span style={{ marginLeft: '2px' }} className=\"col-sm\">\r\n                        Product\r\n                 </span>\r\n                    <span style={{ marginLeft: '20px' }} className=\"col-sm\">\r\n                        Category\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        HSN Code\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        Service\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        GST(%)\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        CGST(%)\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        SGST(%)\r\n                </span>\r\n                    <span style={{ marginLeft: '10px' }} className=\"col-sm\">\r\n                        Inactive\r\n                </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const createRows = () => {\r\n        return products.map((data, index) => {\r\n            return (\r\n                <>\r\n                    <div className=\"row\" id={'row' + index} key={index} style={{ marginTop: '5px', backgroundColor: index % 2 === 0 ? '' : '' }}>\r\n                        <div className=\"col-sm\">\r\n                            <input type='hidden'\r\n                                key={data.id}\r\n                                value={data.id}\r\n                                ref={register()}\r\n                                name=\"id\"\r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                type=\"text\"\r\n                                name=\"product\"\r\n                                autoComplete=\"off\"\r\n                                defaultValue={data.name}\r\n                                readOnly={readOnly}\r\n                                size={25}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                className={`form-control ${errors.product ? \"is-invalid\" : \"\"}`}\r\n                                ref={register(\r\n                                    {\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'Name should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                className={`${errors.product ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.product && (\r\n                                <p className=\"errorMsg\">{errors.product.message}</p>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <select\r\n                                readOnly={readOnly}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                defaultValue={data.prodCategryId} ref={register()} name=\"categoryType\">\r\n                                {categories}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                type=\"text\"\r\n                                defaultValue={data.hsnCode}\r\n                                name=\"hsn\"\r\n                                autoComplete=\"off\"\r\n                                readOnly={readOnly}\r\n                                size={8}\r\n                                maxLength={8}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                className={`form-control ${errors.hsn ? \"is-invalid\" : \"\"}`}\r\n                                ref={register({\r\n                                    required: 'Name is required.',\r\n                                    pattern: {\r\n                                        value: /[a-zA-Z]*/,\r\n                                        message: 'HSN should contain only characters.'\r\n                                    }\r\n                                })}\r\n                                className={`${errors.hsn ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.hsn && (\r\n                                <p className=\"errorMsg\">{errors.hsn.message}</p>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                defaultChecked={data.service}\r\n                                type=\"checkbox\"\r\n                                name=\"service\"\r\n                                ref={register()}\r\n                                readOnly={readOnly}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                size={6}\r\n                                maxLength={6}\r\n                                defaultValue={data.gstPercentage}\r\n                                type=\"text\"\r\n                                name=\"gstPercentage\"\r\n                                autoComplete=\"off\"\r\n                                readOnly={readOnly}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                className={`form-control ${errors.gstPercentage ? \"is-invalid\" : \"\"}`}\r\n                                ref={register({\r\n                                    required: 'Name is required.',\r\n                                    pattern: {\r\n                                        value: /[a-zA-Z]*/,\r\n                                        message: 'HSN should contain only characters.'\r\n                                    }\r\n                                })}\r\n                                className={`${errors.gstPercentage ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.gstPercentage && (\r\n                                <p className=\"errorMsg\">{errors.gstPercentage.message}</p>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                defaultValue={data.cgstPercentage}\r\n                                type=\"text\"\r\n                                name=\"cgstPercentage\"\r\n                                autoComplete=\"off\"\r\n                                size={6}\r\n                                maxLength={6}\r\n                                readOnly={readOnly}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                className={`form-control ${errors.cgstPercentage ? \"is-invalid\" : \"\"}`}\r\n                                ref={register({\r\n                                    required: 'Name is required.',\r\n                                    pattern: {\r\n                                        value: /[a-zA-Z]*/,\r\n                                        message: 'HSN should contain only characters.'\r\n                                    }\r\n                                })}\r\n                                className={`${errors.cgstPercentage ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.cgstPercentage && (\r\n                                <p className=\"errorMsg\">{errors.cgstPercentage.message}</p>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                defaultValue={data.sgstPercentage}\r\n                                type=\"text\"\r\n                                name=\"sgstPercentage\"\r\n                                autoComplete=\"off\"\r\n                                readOnly={readOnly}\r\n                                size={6}\r\n                                maxLength={6}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                className={`form-control ${errors.sgstPercentage ? \"is-invalid\" : \"\"}`}\r\n                                ref={register({\r\n                                    required: 'Name is required.',\r\n                                    pattern: {\r\n                                        value: /[a-zA-Z]*/,\r\n                                        message: 'HSN should contain only characters.'\r\n                                    }\r\n                                })}\r\n                                className={`${errors.sgstPercentage ? 'input-error' : ''}`}\r\n                            />\r\n                            {errors.sgstPercentage && (\r\n                                <p className=\"errorMsg\">{errors.sgstPercentage.message}</p>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <input\r\n                                key={data.id}\r\n                                style={{ textDecoration: data.isDeleted ? 'line-through' : '', color: data.isDeleted ? 'red' : '' }}\r\n                                defaultChecked={data.inactive}\r\n                                type=\"checkbox\"\r\n                                name=\"inActive\"\r\n                                ref={register(\r\n                                )}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <button id=\"btn-edit\" style={{ display: data.isDeleted ? 'none' : 'block' }} data-rownum={index} className=\"btn btn-primary\" type=\"button\" onClick={editUpdateEvent} >\r\n                                Edit\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <button id=\"btn-remove\" data-rownum={index} className=\"btn btn-danger\" type=\"button\" onClick={removeUndoEvent} >\r\n                                {data.isDeleted ? 'Undo' : 'Delete'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )\r\n        })\r\n    }\r\n\r\n    const onSubmit = (data, e) => {\r\n        console.log('Data submitted.!');\r\n        let product = {\r\n            'id': e.target.childNodes[2].childNodes[0].childNodes[0].value,\r\n            'name': e.target.childNodes[2].childNodes[1].childNodes[0].value,\r\n            'prodCategryId': e.target.childNodes[2].childNodes[2].childNodes[0].value,\r\n            'hsnCode': e.target.childNodes[2].childNodes[3].childNodes[0].value,\r\n            'service': e.target.childNodes[2].childNodes[4].childNodes[0].checked,\r\n            'gstPercentage': e.target.childNodes[2].childNodes[5].childNodes[0].value,\r\n            'cgstPercentage': e.target.childNodes[2].childNodes[6].childNodes[0].value,\r\n            'sgstPercentage': e.target.childNodes[2].childNodes[7].childNodes[0].value,\r\n            'inactive': e.target.childNodes[2].childNodes[8].childNodes[0].checked,\r\n            'isDeleted': false\r\n        };\r\n        updateProducts(product).then(response => {\r\n            console.log('Inserted', response.data);\r\n            products.push(response.data)\r\n            console.log('Changed', products);\r\n            let form = document.getElementById(\"newProduct\");\r\n            let productTable = document.getElementById(\"parent\");\r\n            productTable.style.display = 'block'\r\n            form.style.display = 'none';\r\n            setProducts(products);\r\n        })\r\n    }\r\n\r\n    const newProductEvent = (event) => {\r\n        let form = document.getElementById(\"newProduct\");\r\n        let productTable = document.getElementById(\"parent\");\r\n        console.log(productTable)\r\n        productTable.style.display = 'none'\r\n        form.style.display = 'inline-flex';\r\n    }\r\n\r\n    const newProductCancelEvent = (event) => {\r\n        let form = document.getElementById(\"newProduct\");\r\n        let productTable = document.getElementById(\"parent\");\r\n        productTable.style.display = 'block'\r\n        form.style.display = 'none';\r\n    }\r\n\r\n    const handlePageClick = (data) => {\r\n        console.log(data.selected);\r\n        setPage(data.selected)\r\n    };\r\n\r\n    return (\r\n        <ErrorBoundary\r\n            FallbackComponent={ErrorFallback}>\r\n            <div class=\"container\">\r\n                <LoadingOverlay\r\n                    active={isActive}\r\n                    spinner\r\n                    text={message}\r\n                >\r\n                    <Form className=\"input-form\" onSubmit={handleSubmit(onSubmit)}>\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-3\">\r\n                                    <button class=\"btn btn-primary\" onClick={newProductEvent} type=\"button\">Add new product</button>\r\n                                </div>\r\n                                <div className=\"col-sm-6\">\r\n                                    <input ref={refSearch} onKeyDown={searchEvent} class=\"form-control\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"></input>\r\n                                </div>\r\n                                <div className=\"col-sm-3\">\r\n                                    <button class=\"btn btn-outline-success\" onClick={searchEvent} type=\"button\">Search</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {createHeader()}\r\n                        <div id=\"newProduct\" style={{ display: 'none' }} className=\"row\">\r\n                            <div className=\"col-sm\">\r\n                                <input type='hidden'\r\n                                    value=\"0\"\r\n                                    name=\"id_0\"\r\n                                ></input>\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"product_0\"\r\n                                    autoComplete=\"off\"\r\n                                    size={25}\r\n                                    className={`form-control ${errors.product_0 ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register(\r\n                                        {\r\n                                            required: 'Name is required.',\r\n                                            pattern: {\r\n                                                value: /[a-zA-Z]*/,\r\n                                                message: 'Name should contain only characters.'\r\n                                            }\r\n                                        })}\r\n                                    className={`${errors.product_0 ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.product_0 && (\r\n                                    <p className=\"errorMsg\">{errors.product_0.message}</p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <select\r\n                                    ref={register()} name=\"categoryType_0\">\r\n                                    {categories}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"hsn_0\"\r\n                                    autoComplete=\"off\"\r\n                                    size={8}\r\n                                    maxLength={8}\r\n                                    className={`form-control ${errors.hsn_0 ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'HSN should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.hsn_0 ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.hsn_0 && (\r\n                                    <p className=\"errorMsg\">{errors.hsn_0.message}</p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    name=\"service_0\"\r\n                                    ref={register()}\r\n                                    readOnly={readOnly}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    size={6}\r\n                                    maxLength={6}\r\n                                    type=\"text\"\r\n                                    name=\"gstPercentage_0\"\r\n                                    autoComplete=\"off\"\r\n                                    className={`form-control ${errors.gstPercentage_0 ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'HSN should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.gstPercentage_0 ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.gstPercentage_0 && (\r\n                                    <p className=\"errorMsg\">{errors.gstPercentage_0.message}</p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"cgstPercentage_0\"\r\n                                    autoComplete=\"off\"\r\n                                    size={6}\r\n                                    maxLength={6}\r\n                                    className={`form-control ${errors.cgstPercentage_0 ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'HSN should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.cgstPercentage_0 ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.cgstPercentage_0 && (\r\n                                    <p className=\"errorMsg\">{errors.cgstPercentage_0.message}</p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"sgstPercentage_0\"\r\n                                    autoComplete=\"off\"\r\n                                    size={6}\r\n                                    maxLength={6}\r\n                                    className={`form-control ${errors.sgstPercentage_0 ? \"is-invalid\" : \"\"}`}\r\n                                    ref={register({\r\n                                        required: 'Name is required.',\r\n                                        pattern: {\r\n                                            value: /[a-zA-Z]*/,\r\n                                            message: 'HSN should contain only characters.'\r\n                                        }\r\n                                    })}\r\n                                    className={`${errors.sgstPercentage_0 ? 'input-error' : ''}`}\r\n                                />\r\n                                {errors.sgstPercentage_0 && (\r\n                                    <p className=\"errorMsg\">{errors.sgstPercentage_0.message}</p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    name=\"inActive_0\"\r\n                                    ref={register(\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <button class=\"btn btn-primary\" type=\"submit\">Save</button>\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <button class=\"btn btn-danger\" onClick={newProductCancelEvent} type=\"button\">Cancel</button>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                    <div id=\"parent\">\r\n                        {createRows()}\r\n                        <div className=\"row justify-content-md-center\">\r\n                            <div className=\"col-sm\">\r\n                                <ReactPaginate\r\n                                    previousLabel={'previous'}\r\n                                    nextLabel={'next'}\r\n                                    breakLabel={'...'}\r\n                                    breakClassName={'break-me'}\r\n                                    pageCount={totalNoOfPages}\r\n                                    marginPagesDisplayed={0}\r\n                                    pageRangeDisplayed={2}\r\n                                    onPageChange={handlePageClick}\r\n                                    containerClassName={'pagination'}\r\n                                    activeClassName={'pagination'}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </LoadingOverlay>\r\n            </div>\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n\r\nexport default Product","D:\\react\\mb-app\\src\\products\\ProductCtrl.js",[],"D:\\react\\mb-app\\src\\products\\ProductAPI.js",[],"D:\\react\\mb-app\\src\\error\\error.js",[],"D:\\react\\mb-app\\src\\invoice\\Invoice.js",["192","193","194","195","196","197","198","199","200","201","202","203","204"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { fetchAllCustomers } from '../customer/CustomerAPI'\r\nimport { useStore } from \"react-redux\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport { loadAll } from '../products/ProductAPI'\r\nimport Table from 'react-bootstrap/Table';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport * as FaIcons from 'react-icons/fa'\r\nimport * as AiIcons from 'react-icons/ai'\r\n\r\nfunction Invoice() {\r\n\r\n    const { register, handleSubmit, errors, setValue } = useForm();\r\n    const [message, setMessage] = useState('Loading content...');\r\n    const [modalMessage, setModalMessage] = useState('');\r\n    const [type, setType] = useState('Invoice');\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [customerFromStore, setCustomerFromStore] = useState([])\r\n    const [productList, setProductList] = useState([])\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [showCheckOut, setShowCheckOut] = useState(false);\r\n    const [rate, setRate] = useState(0);\r\n    const [amount, setAmount] = useState(0.00);\r\n    const [stock, setStock] = useState(0);\r\n\r\n    let [cartList, setCartList] = useState([])\r\n    let [productSelected, setProductSelected] = useState({})\r\n\r\n    const refQty = useRef('');\r\n    const productRef = useRef('')\r\n    const customerRef = useRef('')\r\n\r\n    useEffect(() => {\r\n        fetchAllCustomers().then(response => {\r\n            console.log('Invoice All Customer ', response)\r\n            setCustomerFromStore(response.data)\r\n            loadAll().then(response => {\r\n                console.log(response.data)\r\n                setProductList(response.data)\r\n                setIsActive(false);\r\n            })\r\n        })\r\n    }, []);\r\n\r\n    const onProductChangeEvent = (event) => {\r\n        console.log('Event', event.target.value)\r\n        let data = productList.find(element => element.name === event.target.value);\r\n        console.log('DATA', data)\r\n        if (data !== undefined) {\r\n            setProductSelected(data);\r\n            setStock(data.stock);\r\n            setRate(data.productRates[0].rate);\r\n        }\r\n    }\r\n\r\n    const onAddEvent = (event) => {\r\n        console.log('Add Event', productSelected)\r\n        console.log('cartList', cartList)\r\n        console.log('Qty', refQty.current.value);\r\n        console.log('product', productRef.current.value)\r\n        let temp = [];\r\n        if ((productRef.current.value.length == 0 || productRef.current.value === undefined)) {\r\n            setModalMessage('Please select product before adding to the cart.!')\r\n            setSmShow(true);\r\n        } else if ((refQty.current.value.length == 0 || refQty.current.value === undefined)) {\r\n            setModalMessage('Please enter quantity before adding to the cart.!')\r\n            setSmShow(true);\r\n        } else {\r\n            let check = cartList.find(element => element.id === productSelected.id ? true : false)\r\n            if (check) {\r\n                console.log('Product added');\r\n                setModalMessage('Product ' + productSelected.name + ' is present in the cart.!');\r\n                setSmShow(true)\r\n            } else {\r\n                let amt = amount + parseFloat(refQty.current.value) * rate\r\n                setAmount(amt);\r\n                temp.push(...cartList, { id: productSelected.id, name: productSelected.name, qty: refQty.current.value, amt: amount });\r\n                setCartList(temp);\r\n                document.getElementById('btnSave').style.display = 'block';\r\n                document.getElementById('btnCancel').style.display = 'block';\r\n            }\r\n\r\n        }\r\n        console.log('cartList', cartList);\r\n    }\r\n    const removeElement = (event) => {\r\n        let deductAmt = 0;\r\n        let index = parseInt(event.target.attributes['data-rownum'].value);\r\n        cartList.map((val, idx) => {\r\n            if (val.id === index) {\r\n                console.log('Got it')\r\n                deductAmt = deductAmt + (parseFloat(val.qty) * rate)\r\n                cartList.splice(idx, 1)\r\n            }\r\n        })\r\n        setAmount(amount - deductAmt);\r\n        setCartList([...cartList]);\r\n        if (cartList.length === 0) {\r\n            document.getElementById('btnSave').style.display = 'none';\r\n            document.getElementById('btnCancel').style.display = 'none';\r\n        }\r\n        console.log(cartList)\r\n    }\r\n\r\n    const cancelEvent = (event) => {\r\n        setCartList([]);\r\n        setAmount(0);\r\n        document.getElementById('btnSave').style.display = 'none';\r\n        document.getElementById('btnCancel').style.display = 'none';\r\n    }\r\n\r\n    const checkOutEvent = (event) => {\r\n        if (customerRef.current.value.length == 0 || customerRef.current.value === undefined) {\r\n            setModalMessage('Please select customer before checking out the cart.!')\r\n            setSmShow(true);\r\n        } else {\r\n            setShowCheckOut(true)\r\n        }\r\n    }\r\n\r\n    const handleClose = () => setShowCheckOut(false);\r\n\r\n    const typeEvent = (event) => {\r\n        setType(event.target.value);\r\n        document.getElementById('idNumber').style.display = event.target.value === 'DC' ? 'inline-block' : 'none';\r\n    }\r\n\r\n    const onSubmit = (data, e) => {\r\n        console.log('Data', data)\r\n    }\r\n\r\n    return (\r\n        <div class=\"container-fluid\">\r\n            <LoadingOverlay\r\n                active={isActive}\r\n                spinner\r\n                text={message}\r\n            >\r\n                <div style={{ backgroundColor: 'red', color: 'white' }}>Invoice</div>\r\n                <Form className=\"input-form\" onSubmit={handleSubmit(onSubmit)}>\r\n                    <div class=\"d-flex flex-column bg-secondary text-white\">\r\n                        <div className=\"p-2\">\r\n                            Customer&nbsp;<input ref={customerRef} list=\"customerList\"\r\n                                name=\"customerLst\" id=\"customerLst\">\r\n                            </input>\r\n                            <datalist id=\"customerList\">\r\n                                {\r\n                                    Object.keys(customerFromStore).map((item, index) => {\r\n                                        let name = customerFromStore[item].name;\r\n                                        let id = customerFromStore[item].id;\r\n                                        return (\r\n                                            <option value={name} key={index}></option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </datalist>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"d-flex flex-row bg-primary text-white\"  >\r\n                        <div className=\"p-2\">\r\n                            Product\r\n                        </div>\r\n                        <div style={{ marginLeft: '120px' }} className=\"p-2\">\r\n                            Qty\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"d-flex flex-row bg-primary text-white\"  >\r\n                        <div className=\"p-2\">\r\n                            <input ref={productRef} onChange={onProductChangeEvent} list=\"productList\" name=\"productLst\" id=\"productLst\"></input>\r\n                            <datalist id=\"productList\">\r\n                                {\r\n                                    Object.keys(productList).map((item, index) => {\r\n                                        let name = productList[item].name;\r\n                                        let id = productList[item].id;\r\n                                        return (\r\n                                            <option value={name} key={index}></option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </datalist>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input ref={refQty} size={5} name=\"qty\" id=\"qty\"></input>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <input onClick={onAddEvent} type=\"button\" className=\"btn btn-dark btn-sm\" value=\"Add\"></input>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"d-flex flex-row text-white\" style={{ backgroundColor: 'darkblue' }} >\r\n                        <div className=\"p-2 justify-content-start\">\r\n                            <span>Stock:&nbsp;{stock}</span>\r\n                            <span>Rate:&nbsp;{rate}&nbsp;per Nos</span>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ overflow: 'scroll' }}>\r\n                        <Table responsive striped bordered hover >\r\n                            <thead>\r\n                                <tr className=\"darkblue\">\r\n                                    <th>Sl.No</th>\r\n                                    <th>Product</th>\r\n                                    <th>Qty</th>\r\n                                    <th>Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    Object.keys(cartList).map((item, index) => {\r\n                                        let name = cartList[item].name;\r\n                                        let id = cartList[item].id;\r\n                                        let qty = cartList[item].qty;\r\n                                        return (\r\n                                            <>\r\n                                                <tr key={index}>\r\n                                                    <td >{index + 1}</td>\r\n                                                    <td >{name}</td>\r\n                                                    <td >{qty}</td>\r\n                                                    <td >\r\n                                                        <button className=\"btn btn-danger\" id='removeId' type=\"button\" onClick={removeElement} data-rownum={id} >\r\n                                                            Delete\r\n                                                    </button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"p-2\">\r\n                            Amount&nbsp;:&nbsp;<span>{amount}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row\">\r\n                        <div className=\"p-2\">\r\n                            <button onClick={checkOutEvent} id=\"btnSave\" style={{ display: 'none' }} type='button' className=\"btn btn-primary\">Checkout</button>\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <button onClick={cancelEvent} id=\"btnCancel\" style={{ display: 'none' }} type='button' className=\"btn btn-danger \">Cancel</button>\r\n                        </div>\r\n                    </div>\r\n                    <Modal\r\n                        size=\"sm\"\r\n                        show={smShow}\r\n                        onHide={() => setSmShow(false)}\r\n                        aria-labelledby=\"productAlert\"\r\n                    >\r\n                        <Modal.Header className=\"modal-header\" closeButton>\r\n                            <Modal.Title id=\"productAlert\">\r\n                                Alert\r\n                        </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>{modalMessage}</Modal.Body>\r\n                    </Modal>\r\n                    <Modal show={showCheckOut} onHide={handleClose}>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Check out summary...</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div class=\"d-flex flex-row text-white\" style={{ backgroundColor: 'darkblue' }}>\r\n                                <div className=\"p-2\">\r\n                                    <input checked={true} type=\"radio\" name=\"paymentType\" value={1} ref={register} />Cash\r\n                                 </div>\r\n                                <div className=\"p-2\">\r\n                                    <input type=\"radio\" name=\"paymentType\" value={2} ref={register} />Credit\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"d-flex flex-row text-white\" style={{ backgroundColor: 'yellowgreen' }}>\r\n                                <div className=\"p-2\">\r\n                                    Type&nbsp;\r\n                                    <select id=\"type\" onChange={typeEvent}>\r\n                                        <option value=\"Invoice\" >Invoice</option>\r\n                                        <option value=\"DC\" >DC</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div className=\"p-2\">\r\n                                    <input style={{ display: 'none' }} id=\"idNumber\" type=\"text\" size=\"10\"></input>\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <Table responsive striped bordered hover >\r\n                                    <thead>\r\n                                        <tr className=\"darkblue\">\r\n                                            <th>Product</th>\r\n                                            <th>Qty</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {\r\n                                            Object.keys(cartList).map((item, index) => {\r\n                                                let name = cartList[item].name;\r\n                                                let id = cartList[item].id;\r\n                                                let qty = cartList[item].qty;\r\n                                                return (\r\n                                                    <>\r\n                                                        <tr key={index}>\r\n                                                            <td >{name}</td>\r\n                                                            <td >{qty}</td>\r\n                                                        </tr>\r\n                                                    </>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </tbody>\r\n                                </Table>\r\n                                <div className=\"d-flex flex-column text-white\" style={{ backgroundColor: 'blueviolet' }}>\r\n                                    <div className=\"p-2\">\r\n                                        GST&nbsp;:&nbsp;<span>0.00</span>\r\n                                    </div>\r\n                                    <div className=\"p-2\">\r\n                                        CGST&nbsp;:&nbsp;<span>0.00</span>\r\n                                    </div>\r\n                                    <div className=\"p-2\">\r\n                                        SGST&nbsp;:&nbsp;<span>0.00</span>\r\n                                    </div>\r\n                                    <div className=\"p-2\">\r\n                                        Amount&nbsp;:&nbsp;<span>{amount}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"primary\" onClick={checkOutEvent}>\r\n                                Create {type}\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </Form>\r\n            </LoadingOverlay>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Invoice",{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"210","line":6,"column":19,"nodeType":"211","messageId":"212","endLine":6,"endColumn":27},{"ruleId":"205","replacedBy":"213"},{"ruleId":"207","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":19,"column":58,"nodeType":"217","messageId":"218","endLine":19,"endColumn":60},{"ruleId":"219","severity":1,"message":"220","line":40,"column":8,"nodeType":"221","endLine":40,"endColumn":18,"suggestions":"222"},{"ruleId":"219","severity":1,"message":"223","line":60,"column":8,"nodeType":"221","endLine":60,"endColumn":10,"suggestions":"224"},{"ruleId":"209","severity":1,"message":"225","line":90,"column":41,"nodeType":"211","messageId":"212","endLine":90,"endColumn":43},{"ruleId":"226","severity":1,"message":"227","line":123,"column":37,"nodeType":"228","endLine":123,"endColumn":86},{"ruleId":"226","severity":1,"message":"227","line":159,"column":37,"nodeType":"228","endLine":159,"endColumn":90},{"ruleId":"226","severity":1,"message":"227","line":184,"column":33,"nodeType":"228","endLine":184,"endColumn":83},{"ruleId":"209","severity":1,"message":"229","line":22,"column":22,"nodeType":"211","messageId":"212","endLine":22,"endColumn":33},{"ruleId":"209","severity":1,"message":"230","line":24,"column":22,"nodeType":"211","messageId":"212","endLine":24,"endColumn":33},{"ruleId":"209","severity":1,"message":"231","line":30,"column":10,"nodeType":"211","messageId":"212","endLine":30,"endColumn":18},{"ruleId":"219","severity":1,"message":"232","line":47,"column":8,"nodeType":"221","endLine":47,"endColumn":10,"suggestions":"233"},{"ruleId":"219","severity":1,"message":"234","line":73,"column":8,"nodeType":"221","endLine":73,"endColumn":16,"suggestions":"235"},{"ruleId":"219","severity":1,"message":"236","line":99,"column":8,"nodeType":"221","endLine":99,"endColumn":14,"suggestions":"237"},{"ruleId":"209","severity":1,"message":"238","line":101,"column":45,"nodeType":"211","messageId":"212","endLine":101,"endColumn":53},{"ruleId":"226","severity":1,"message":"227","line":228,"column":33,"nodeType":"228","endLine":228,"endColumn":85},{"ruleId":"226","severity":1,"message":"227","line":261,"column":33,"nodeType":"228","endLine":261,"endColumn":81},{"ruleId":"226","severity":1,"message":"227","line":297,"column":33,"nodeType":"228","endLine":297,"endColumn":91},{"ruleId":"226","severity":1,"message":"227","line":322,"column":33,"nodeType":"228","endLine":322,"endColumn":92},{"ruleId":"226","severity":1,"message":"227","line":347,"column":33,"nodeType":"228","endLine":347,"endColumn":92},{"ruleId":"226","severity":1,"message":"227","line":472,"column":37,"nodeType":"228","endLine":472,"endColumn":91},{"ruleId":"226","severity":1,"message":"227","line":499,"column":37,"nodeType":"228","endLine":499,"endColumn":87},{"ruleId":"226","severity":1,"message":"227","line":528,"column":37,"nodeType":"228","endLine":528,"endColumn":97},{"ruleId":"226","severity":1,"message":"227","line":549,"column":37,"nodeType":"228","endLine":549,"endColumn":98},{"ruleId":"226","severity":1,"message":"227","line":570,"column":37,"nodeType":"228","endLine":570,"endColumn":98},{"ruleId":"209","severity":1,"message":"239","line":5,"column":10,"nodeType":"211","messageId":"212","endLine":5,"endColumn":18},{"ruleId":"209","severity":1,"message":"240","line":10,"column":13,"nodeType":"211","messageId":"212","endLine":10,"endColumn":20},{"ruleId":"209","severity":1,"message":"241","line":11,"column":13,"nodeType":"211","messageId":"212","endLine":11,"endColumn":20},{"ruleId":"209","severity":1,"message":"242","line":15,"column":37,"nodeType":"211","messageId":"212","endLine":15,"endColumn":43},{"ruleId":"209","severity":1,"message":"238","line":15,"column":45,"nodeType":"211","messageId":"212","endLine":15,"endColumn":53},{"ruleId":"209","severity":1,"message":"243","line":16,"column":21,"nodeType":"211","messageId":"212","endLine":16,"endColumn":31},{"ruleId":"244","severity":1,"message":"245","line":64,"column":46,"nodeType":"246","messageId":"247","endLine":64,"endColumn":48},{"ruleId":"244","severity":1,"message":"245","line":67,"column":49,"nodeType":"246","messageId":"247","endLine":67,"endColumn":51},{"ruleId":"215","severity":1,"message":"216","line":91,"column":33,"nodeType":"217","messageId":"218","endLine":91,"endColumn":35},{"ruleId":"244","severity":1,"message":"245","line":115,"column":46,"nodeType":"246","messageId":"247","endLine":115,"endColumn":48},{"ruleId":"209","severity":1,"message":"225","line":152,"column":45,"nodeType":"211","messageId":"212","endLine":152,"endColumn":47},{"ruleId":"209","severity":1,"message":"225","line":176,"column":45,"nodeType":"211","messageId":"212","endLine":176,"endColumn":47},{"ruleId":"209","severity":1,"message":"225","line":295,"column":53,"nodeType":"211","messageId":"212","endLine":295,"endColumn":55},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"no-unused-vars","'setTitle' is assigned a value but never used.","Identifier","unusedVar",["248"],["249"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'customerFromStore' and 'setValue'. Either include them or remove the dependency array.","ArrayExpression",["250"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["251"],"'id' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setReadOnly' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'nextPage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'pageSize'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTotalNoOfPages' needs the current value of 'pageSize'.",["252"],"React Hook useEffect has missing dependencies: 'page' and 'pageSize'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTotalNoOfPages' needs the current value of 'pageSize'.",["253"],"React Hook useEffect has missing dependencies: 'pageSize', 'search', and 'totalProductsSearched'. Either include them or remove the dependency array.",["254"],"'setValue' is assigned a value but never used.","'useStore' is defined but never used.","'FaIcons' is defined but never used.","'AiIcons' is defined but never used.","'errors' is assigned a value but never used.","'setMessage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},"Update the dependencies array to be: [customer, customerFromStore, setValue]",{"range":"265","text":"266"},"Update the dependencies array to be: [dispatch]",{"range":"267","text":"268"},"Update the dependencies array to be: [pageSize]",{"range":"269","text":"270"},"Update the dependencies array to be: [page, pageSize, search]",{"range":"271","text":"272"},"Update the dependencies array to be: [page, pageSize, search, totalProductsSearched]",{"range":"273","text":"274"},[2138,2148],"[customer, customerFromStore, setValue]",[2834,2836],"[dispatch]",[1852,1854],"[pageSize]",[2769,2777],"[page, pageSize, search]",[3619,3625],"[page, pageSize, search, totalProductsSearched]"]